// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name BolddeskSupportSDK
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported import BolddeskSupportSDK
import Combine
import CoreText
import DeveloperToolsSupport
import Foundation
import MobileCoreServices
import Network
import PhotosUI
import SafariServices
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import _WebKit_SwiftUI
public struct BDPortalConfiguration {
  public static var customFontName: Swift.String?
}
public struct BolddeskSDK {
  public static var isShowKB: Swift.Bool
  public static var isShowTicket: Swift.Bool
  public static var applyDefaultFont: Swift.Bool
  public static func initialize(appID: Swift.String, orgId: Swift.String, domainURL: Swift.String)
  public static func setup()
  public static var Theme: BolddeskSupportSDK.SDKTheme {
    get
    set
  }
  public static func setPreferredTheme(_ theme: BolddeskSupportSDK.SDKTheme)
  public static func loginJwt(token: Swift.String)
  public static func reset()
  public static func setHeaderLogo(imageLink: Swift.String)
  public static func set(header: Swift.String = "", description: Swift.String = "", kbTitle: Swift.String = "", kbDescription: Swift.String = "", ticketTitle: Swift.String = "", ticketDescription: Swift.String = "")
  public static func setSubmitTicket(formTitle: Swift.String = "", submitButtonText: Swift.String = "")
  public static func applyTheme(accentColor: Swift.String = "", primaryColor: Swift.String = "")
  public static func showKB()
  public static func showSubmitTicket()
  public static func showHome()
  public static func enableAttachment(_ isEnable: Swift.Bool)
  public static func enableLogging()
  public static func enablePushNotification(fcmToken: Swift.String)
  @discardableResult
  public static func processRemoteNotification(userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  public static func navigateToTicketList()
}
public enum SDKTheme {
  case light
  case dark
  case system
  public static func == (a: BolddeskSupportSDK.SDKTheme, b: BolddeskSupportSDK.SDKTheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol WarmUpable {
  func warmUp()
}
public class WarmUper<Object> where Object : BolddeskSupportSDK.WarmUpable {
  public var numberOfWamedUpObjects: Swift.Int {
    get
    set
  }
  public init(creationClosure: @escaping () -> Object)
  public func prepare()
  public func dequeue() -> Object
  @objc deinit
}
extension WebKit.WKWebView : BolddeskSupportSDK.WarmUpable {
  @_Concurrency.MainActor @preconcurrency public func warmUp()
}
public typealias WKWebViewWarmUper = BolddeskSupportSDK.WarmUper<WebKit.WKWebView>
extension BolddeskSupportSDK.WarmUper where Object == WebKit.WKWebView {
  public static let shared: BolddeskSupportSDK.WKWebViewWarmUper
}

public struct BuildConfig {
  public static var isDebug: Swift.Bool {
    get
  }
}
public enum ResourceManager {
  public static var frameworkBundle: Foundation.Bundle {
    get
  }
  public static func registerFonts(_ fontFileNames: [Swift.String])
  public static func localized(_ key: Swift.String, value: Swift.String = "", comment: Swift.String = "") -> Swift.String
}




public struct FramePreferenceKey : SwiftUICore.PreferenceKey {
  public static var defaultValue: CoreFoundation.CGRect
  public static func reduce(value: inout CoreFoundation.CGRect, nextValue: () -> CoreFoundation.CGRect)
  public typealias Value = CoreFoundation.CGRect
}
@_Concurrency.MainActor @preconcurrency public struct FrameReader : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(coordinateSpace: SwiftUICore.CoordinateSpace, onChange: @escaping (_ frame: CoreFoundation.CGRect) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s18BolddeskSupportSDK11FrameReaderV4bodyQrvp", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func readingFrame(coordinateSpace: SwiftUICore.CoordinateSpace = .global, onChange: @escaping (_ frame: CoreFoundation.CGRect) -> Swift.Void) -> some SwiftUICore.View
  
}
extension BolddeskSupportSDK.SDKTheme : Swift.Equatable {}
extension BolddeskSupportSDK.SDKTheme : Swift.Hashable {}
extension BolddeskSupportSDK.FrameReader : Swift.Sendable {}
